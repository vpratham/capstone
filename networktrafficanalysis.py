# -*- coding: utf-8 -*-
"""NetworkTrafficAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksCrM_p_h-21AvZrcqJnFOKyvviK_5Q4

# Network Traffic Analysis using ML Techniques

#Reading & Processing Data
"""

import pandas as pd
import numpy as np

df = pd.read_csv('Wednesday-workingHours.pcap_ISCX.csv')
print(df.shape)

"""The "Label" column is encoded as follows: "BENIGN" = 0, attack = 1."""

df[' Label'] = df[' Label'].apply(lambda x: 0 if x == 'BENIGN' else 1)
y = df[' Label'].values

"""Removing Spaces from all column headers to ensure consistency"""

df.columns = df.columns.str.strip()
column_headers_list = df.columns.tolist()

"""Selecting Features"""

selected_features = [
    'Destination Port',
    'Total Fwd Packets',
    'Total Backward Packets',
    'Total Length of Fwd Packets',
    'Total Length of Bwd Packets',
    'Fwd Packet Length Max',
    'Bwd Packet Length Max',
    'Flow Bytes/s',
    'Flow Packets/s',
    'Flow IAT Mean',
    'Flow IAT Std',
    'Flow IAT Max',
    'Fwd IAT Mean',
    'Fwd IAT Std',
    'Fwd IAT Max',
    'Bwd IAT Mean',
    'Bwd IAT Std',
    'SYN Flag Count',
    'PSH Flag Count',
    'ACK Flag Count',
    'FIN Flag Count',
    'Init_Win_bytes_forward',
    'Init_Win_bytes_backward',
    'Average Packet Size',
    'Min Packet Length',
    'Max Packet Length',
    'Active Mean',
    'Idle Mean'
]

"""# Creating a Reduced Dataset

*optional for faster execuution, may lead to unreliable results due to reduced size*
"""

X = df[selected_features]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

'''
#dont
unique, counts = np.unique(y_train, return_counts=True)
dict(zip(unique, counts))
'''

X.head()

"""# Classifier Comparison

Importing relevant libraries
"""

import time
from sklearn import model_selection
from sklearn.impute import SimpleImputer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import cross_val_score
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn import metrics
# Modelling
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from scipy.stats import randint

# Tree Visualisation
from sklearn.tree import export_graphviz
from IPython.display import Image
import graphviz

import seaborn as sns

"""Cleabing the values in X_train & X_test (optimize running time)"""

X_train = np.clip(X_train, a_min=None, a_max=1e10)
X_test = np.clip(X_test, a_min=None, a_max=1e10)
X = np.clip(X,a_min=None,a_max=1e10)

imputer = SimpleImputer(missing_values=np.nan, strategy='mean')

X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)
X = imputer.transform(X)

"""Reducing selected values in the following fields"""

limit_recs = 10000

X_train = X_train[:limit_recs]
X_test = X_test[:limit_recs]
y_train = y_train[:limit_recs]
y_test = y_test[:limit_recs]

"""Running each selected model"""

models = []
cms = []
#models.append(('KNN', KNeighborsClassifier()))
#models.append(('SVM', SVC(gamma='auto')))
#models.append(('CART', DecisionTreeClassifier(max_depth=5)))
models.append(('RF', RandomForestClassifier(max_depth=5, n_estimators=5, max_features=3)))
#models.append(('KNN', KNeighborsClassifier()))
#models.append(('ABoost', AdaBoostClassifier()))
#models.append(('NB', GaussianNB()))


print('Model\tAcc\tPr\tRecall\tF1\tExecution')

for name, model in models:
    start_time = time.time()
    kfold = model_selection.KFold(n_splits=3, shuffle=True, random_state=24)

    accuracy = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy').mean()
    precision = cross_val_score(model, X_train, y_train, cv=kfold, scoring='precision').mean()
    recall = cross_val_score(model, X_train, y_train, cv=kfold, scoring='recall').mean()
    f1_score = cross_val_score(model, X_train, y_train, cv=kfold, scoring='f1_weighted').mean()

    delta = time.time() - start_time

    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # Create confusion matrix
    cm = confusion_matrix(y_test, y_pred)

    cms.append((name,cm))

    print('{}\t{:.3f}\t{:.3f}\t{:.3f}\t{:.3f}\t{:.2f} secs'.format(name, accuracy, precision, recall, f1_score, delta))

#RANDOM FOREST CLASSIFIER
from IPython.display import Image
import graphviz

i=0

rf = RandomForestClassifier(n_estimators=5, random_state=24)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

import joblib
joblib.dump(rf, 'random_forest_model.pkl')

'''
tree = rf.estimators_[i]
dot_data = export_graphviz(tree, feature_names=selected_features, filled=True,impurity=False, proportion=True)
graph = graphviz.Source(dot_data)

graph.render("tree_render", format="png")

Image("tree_render.png")

display(graph)

#CART MODEL
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

tree_regressor = DecisionTreeRegressor(random_state=24)
tree_regressor.fit(X_train, y_train)
y_pred = tree_regressor.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

plt.figure(figsize=(10, 6))

# Scatter plot: Actual values vs Predicted values
plt.scatter(y_test, y_pred, color='blue', alpha=0.6, label='Predicted vs Actual')

# Plot the line of perfect predictions (y = x)
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Values")
plt.ylabel("Predictions")
plt.title("Scatter Plot: Actual Values vs. Predictions")
#plt.show()

print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

"""Displaying the Confusion Matrix generated for each model"""

for title_matrix,matrix in cms:
  cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = matrix, display_labels = [0, 1])
  cm_display.plot()
  plt.title(title_matrix)
  plt.show()
'''

for title, matrix in cms:
  tn, fp, fn, tp = matrix.ravel()
  specificty = tn/(tn+fp)
  sensitivity = tp/(tp+fn)
  print(title)
  print('Specificty: ',specificty)
  print('Sensitivity: ',sensitivity)
  print("\n")
